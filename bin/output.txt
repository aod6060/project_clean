/*
    test.vert

    This is a simple glsl file to test graph functionality.
    It might be the default.
*/
#version 400

layout(location=0) in vec3 vertices;
layout(location=1) in vec2 texCoords;
layout(location=2) in vec3 normals;

uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;

out vec2 v_TexCoords;
out vec3 v_Normals;

void main() {
    gl_Position = proj * view * model * vec4(vertices, 1.0);
    v_TexCoords = texCoords;
    v_Normals = normals;
}

/*
    test.frag

    This is a simple glsl file to test graph functionality.
    It might be the default.
*/
#version 400

uniform sampler2D tex0;

in vec2 v_TexCoords;
in vec3 v_Normals;
out vec4 out_Color;

void main() {
    //out_Color = vec4(v_TexCoords, 0.0, 1.0);
    out_Color = texture(tex0, v_TexCoords);
}

/*
    test.vert

    This is a simple glsl file to test graph functionality.
    It might be the default.
*/
#version 400

layout(location=0) in vec3 vertices;
layout(location=1) in vec2 texCoords;
layout(location=2) in vec3 normals;

uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;

out vec2 v_TexCoords;
out vec3 v_Normals;

void main() {
    gl_Position = proj * view * model * vec4(vertices, 1.0);
    v_TexCoords = texCoords;
    v_Normals = normals;
}

/*
    test.frag

    This is a simple glsl file to test graph functionality.
    It might be the default.
*/
#version 400

//uniform sampler2D tex0;
uniform float texScale;
uniform sampler2D blendMap;
uniform sampler2D channelBlack;
uniform sampler2D channelRed;
uniform sampler2D channelGreen;
uniform sampler2D channelBlue;

in vec2 v_TexCoords;
in vec3 v_Normals;
out vec4 out_Color;

void main() {

    vec3 bm = texture(blendMap, v_TexCoords).rgb;

    vec3 colorBlack = texture(channelBlack, v_TexCoords * texScale).rgb * (1.0 - (bm.r + bm.g + bm.b));
    vec3 colorRed = texture(channelRed, v_TexCoords * texScale).rgb;
    vec3 colorGreen = texture(channelGreen, v_TexCoords * texScale).rgb;
    vec3 colorBlue = texture(channelBlue, v_TexCoords * texScale).rgb;

    vec3 color = colorRed * bm.r + colorGreen * bm.g + colorBlue * bm.b + colorBlack;

    out_Color = vec4(color, 1.0);
}

#version 400


layout(location=0) in vec3 vertices;
layout(location=1) in vec2 texCoords;

uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;

out vec2 v_TexCoords;

void main() {
    gl_Position = proj * view * model * vec4(vertices, 1.0);
    v_TexCoords = texCoords;
}

#version 400


uniform sampler2D tex0;

in vec2 v_TexCoords;
out vec4 out_Color;

void main() {
    out_Color = texture(tex0, v_TexCoords);    
    //out_Color = vec4(v_TexCoords, 0.0f, 1.0f);
}

#version 400


layout(location=0) in vec3 vertices;
layout(location=1) in vec2 texCoords;
layout(location=2) in vec3 normals;


uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;

out vec2 v_TexCoords;
out vec3 v_Normals;

void main() {
    gl_Position = proj * view * model * vec4(vertices, 1.0);
    v_TexCoords = texCoords;
    v_Normals = normals;
}

#version 400

uniform sampler2D tex0;
uniform float texScale;
uniform float timeDelta;

in vec2 v_TexCoords;
in vec3 v_Normals;

out vec4 out_Color;

void main() {

    vec2 tc = vec2(v_TexCoords.x + timeDelta, v_TexCoords.y) * texScale;
    vec2 tc2 = vec2(v_TexCoords.x + timeDelta * 2.0, v_TexCoords.y) * texScale * 0.5;
    vec2 tc3 = vec2(v_TexCoords.x + timeDelta * 4.0, v_TexCoords.y) * texScale * 0.25;

    vec3 color1 = texture(tex0, tc).rgb;
    vec3 color2 = texture(tex0, tc2).rgb;
    vec3 color3 = texture(tex0, tc3).rgb;

    vec3 color = mix(color1, color2, 0.75);
    color = mix(color, color3, 0.75);

    //out_Color = texture(tex0, tc);
    out_Color = vec4(color, 1.0);
    //out_Color = vec4(v_TexCoords, 0.0, 1.0);
}

#version 400

// Attributes
layout(location=0) in vec3 vertices;
layout(location=1) in vec2 texCoords;

// Uniforms
uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;

// Varying
out vec2 v_TexCoords;

void main() {
    gl_Position = proj * view * model * vec4(vertices, 1.0);
    v_TexCoords = texCoords;
}

#version 400

// Uniforms
uniform sampler2D inputTex0;
uniform float size;

// Varying
in vec2 v_TexCoords;
out vec4 out_Color;

vec3 hblur(sampler2D samp, vec2 tc, float blurSize) {
    vec3 sum = vec3(0.0);
    float iBlurSize = 1.0 / blurSize;

    sum += texture(samp, vec2(tc.x - 4.0 * iBlurSize, tc.y)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x - 3.0 * iBlurSize, tc.y)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x - 2.0 * iBlurSize, tc.y)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x - 1.0 * iBlurSize, tc.y)).rgb * 0.125;
    
    sum += texture(samp, vec2(tc.x + 1.0 * iBlurSize, tc.y)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x + 2.0 * iBlurSize, tc.y)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x + 3.0 * iBlurSize, tc.y)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x + 4.0 * iBlurSize, tc.y)).rgb * 0.125;

    return sum;
}

vec3 vblur(sampler2D samp, vec2 tc, float blurSize) {
    vec3 sum = vec3(0.0);
    float iBlurSize = 1.0 / blurSize;

    sum += texture(samp, vec2(tc.x, tc.y - 4.0 * iBlurSize)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x, tc.y - 3.0 * iBlurSize)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x, tc.y - 2.0 * iBlurSize)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x, tc.y - 1.0 * iBlurSize)).rgb * 0.125;

    sum += texture(samp, vec2(tc.x, tc.y + 1.0 * iBlurSize)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x, tc.y + 2.0 * iBlurSize)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x, tc.y + 3.0 * iBlurSize)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x, tc.y + 4.0 * iBlurSize)).rgb * 0.125;

    return sum;
}

void main() {
    
    vec3 hb = hblur(inputTex0, v_TexCoords, size);
    vec3 vb = vblur(inputTex0, v_TexCoords, size);
    vec3 i = texture(inputTex0, v_TexCoords).rgb;

    vec3 o = (hb + vb + i) / 3.0;
    

    //out_Color = vec4(1.0, 0.0, 0.0, 1.0);
    out_Color = vec4(o, 1.0);
}

#version 400

// Attributes
layout(location=0) in vec3 vertices;
layout(location=1) in vec2 texCoords;

// Uniforms
uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;

// Varying
out vec2 v_TexCoords;

void main() {
    gl_Position = proj * view * model * vec4(vertices, 1.0);
    v_TexCoords = texCoords;
}

#version 400

// Uniforms
uniform sampler2D font0;
uniform vec3 color;

// Varying
in vec2 v_TexCoords;
out vec4 out_Color;

void main() {

    vec4 c = texture(font0, v_TexCoords);

    if(c.a < 0.5f) {
        discard;
    }

    c.rgb = c.rgb * color;

    out_Color = c;
}

#version 400

// Attributes
layout(location=0) in vec3 vertices;

// Uniforms
uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;

// Varying

void main() {
    gl_Position = proj * view * model * vec4(vertices, 1.0);
}

#version 400

// Uniforms
uniform vec3 color;

// Varyings
out vec4 out_Color;

void main() {
    out_Color = vec4(color, 1.0);
}

0
tsize=16, osize=64
tex: 7
renderbuf: 1
Success: Framebuffer created
Score: 0
Score: 4
Score: 5
Score: 21
Score: 25
Score: 27
Score: 35
Score: 36
Score: 37
Score: 41
Score: 49
Score: 51
Score: 52
Score: 56
Score: 60
Score: 61
Score: 62
Score: 63
Score: 67
Score: 68
Score: 70
Score: 72
Score: 73
Score: 74
Score: 75
Score: 77
Score: 78
Score: 79
Score: 83
Score: 99
Score: 100
Score: 101
Score: 105
Score: 107
Score: 108
Score: 110
Score: 111
Score: 115
Score: 119
Score: 120
Score: 121
Score: 125
Score: 127
Score: 128
Score: 136
Score: 138
Score: 142
Score: 144
Score: 145
Score: 146
Score: 148
Score: 149
Score: 150
Score: 154
Score: 155
Score: 156
Score: 157
Score: 159
Score: 163
Score: 164
Score: 168
Score: 169
Score: 185
Score: 186
Score: 187
Score: 189
Score: 190
Score: 191
Score: 192
Score: 193
Score: 194
Score: 195
Score: 197
Score: 199
Score: 200
Score: 216
Score: 217
Score: 218
Score: 220
Score: 222
Score: 223
Score: 225
Score: 226
Score: 230
Score: 294
Score: 296
Score: 312
Score: 313
Score: 314
Score: 315
Score: 316
Score: 324
Score: 325
Score: 341
Score: 342
Score: 346
0
