/*
    test.vert

    This is a simple glsl file to test graph functionality.
    It might be the default.
*/
#version 400

layout(location=0) in vec3 vertices;
layout(location=1) in vec2 texCoords;
layout(location=2) in vec3 normals;

uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;

out vec2 v_TexCoords;
out vec3 v_Normals;

void main() {
    gl_Position = proj * view * model * vec4(vertices, 1.0);
    v_TexCoords = texCoords;
    v_Normals = normals;
}

/*
    test.frag

    This is a simple glsl file to test graph functionality.
    It might be the default.
*/
#version 400

uniform sampler2D tex0;

in vec2 v_TexCoords;
in vec3 v_Normals;
out vec4 out_Color;

void main() {
    //out_Color = vec4(v_TexCoords, 0.0, 1.0);
    out_Color = texture(tex0, v_TexCoords);
}

/*
    test.vert

    This is a simple glsl file to test graph functionality.
    It might be the default.
*/
#version 400

layout(location=0) in vec3 vertices;
layout(location=1) in vec2 texCoords;
layout(location=2) in vec3 normals;

uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;

out vec2 v_TexCoords;
out vec3 v_Normals;

void main() {
    gl_Position = proj * view * model * vec4(vertices, 1.0);
    v_TexCoords = texCoords;
    v_Normals = normals;
}

/*
    test.frag

    This is a simple glsl file to test graph functionality.
    It might be the default.
*/
#version 400

//uniform sampler2D tex0;
uniform float texScale;
uniform sampler2D blendMap;
uniform sampler2D channelBlack;
uniform sampler2D channelRed;
uniform sampler2D channelGreen;
uniform sampler2D channelBlue;

in vec2 v_TexCoords;
in vec3 v_Normals;
out vec4 out_Color;

void main() {

    vec3 bm = texture(blendMap, v_TexCoords).rgb;

    vec3 colorBlack = texture(channelBlack, v_TexCoords * texScale).rgb * (1.0 - (bm.r + bm.g + bm.b));
    vec3 colorRed = texture(channelRed, v_TexCoords * texScale).rgb;
    vec3 colorGreen = texture(channelGreen, v_TexCoords * texScale).rgb;
    vec3 colorBlue = texture(channelBlue, v_TexCoords * texScale).rgb;

    vec3 color = colorRed * bm.r + colorGreen * bm.g + colorBlue * bm.b + colorBlack;

    out_Color = vec4(color, 1.0);
}

#version 400


layout(location=0) in vec3 vertices;
layout(location=1) in vec2 texCoords;
layout(location=2) in vec3 normals;


uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;

out vec2 v_TexCoords;
out vec3 v_Normals;

void main() {
    gl_Position = proj * view * model * vec4(vertices, 1.0);
    v_TexCoords = texCoords;
    v_Normals = normals;
}

#version 400

uniform sampler2D tex0;
uniform float texScale;
uniform float timeDelta;

in vec2 v_TexCoords;
in vec3 v_Normals;

out vec4 out_Color;

void main() {

    vec2 tc = vec2(v_TexCoords.x + timeDelta, v_TexCoords.y) * texScale;

    out_Color = texture(tex0, tc);
    //out_Color = vec4(v_TexCoords, 0.0, 1.0);
}

