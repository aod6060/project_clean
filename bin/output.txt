/*
    test.vert

    This is a simple glsl file to test graph functionality.
    It might be the default.
*/
#version 400

layout(location=0) in vec3 vertices;
layout(location=1) in vec2 texCoords;
layout(location=2) in vec3 normals;

uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;

out vec2 v_TexCoords;
out vec3 v_Normals;

void main() {
    gl_Position = proj * view * model * vec4(vertices, 1.0);
    v_TexCoords = texCoords;
    v_Normals = normals;
}

/*
    test.frag

    This is a simple glsl file to test graph functionality.
    It might be the default.
*/
#version 400

uniform sampler2D tex0;

in vec2 v_TexCoords;
in vec3 v_Normals;
out vec4 out_Color;

void main() {
    //out_Color = vec4(v_TexCoords, 0.0, 1.0);
    out_Color = texture(tex0, v_TexCoords);
}

/*
    test.vert

    This is a simple glsl file to test graph functionality.
    It might be the default.
*/
#version 400

layout(location=0) in vec3 vertices;
layout(location=1) in vec2 texCoords;
layout(location=2) in vec3 normals;

uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;

out vec2 v_TexCoords;
out vec3 v_Normals;

void main() {
    gl_Position = proj * view * model * vec4(vertices, 1.0);
    v_TexCoords = texCoords;
    v_Normals = normals;
}

/*
    test.frag

    This is a simple glsl file to test graph functionality.
    It might be the default.
*/
#version 400

//uniform sampler2D tex0;
uniform float texScale;
uniform sampler2D blendMap;
uniform sampler2D channelBlack;
uniform sampler2D channelRed;
uniform sampler2D channelGreen;
uniform sampler2D channelBlue;

in vec2 v_TexCoords;
in vec3 v_Normals;
out vec4 out_Color;

void main() {

    vec3 bm = texture(blendMap, v_TexCoords).rgb;

    vec3 colorBlack = texture(channelBlack, v_TexCoords * texScale).rgb * (1.0 - (bm.r + bm.g + bm.b));
    vec3 colorRed = texture(channelRed, v_TexCoords * texScale).rgb;
    vec3 colorGreen = texture(channelGreen, v_TexCoords * texScale).rgb;
    vec3 colorBlue = texture(channelBlue, v_TexCoords * texScale).rgb;

    vec3 color = colorRed * bm.r + colorGreen * bm.g + colorBlue * bm.b + colorBlack;

    out_Color = vec4(color, 1.0);
}

#version 400


layout(location=0) in vec3 vertices;
layout(location=1) in vec2 texCoords;

uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;

out vec2 v_TexCoords;

void main() {
    gl_Position = proj * view * model * vec4(vertices, 1.0);
    v_TexCoords = texCoords;
}

#version 400


uniform sampler2D tex0;

in vec2 v_TexCoords;
out vec4 out_Color;

void main() {
    out_Color = texture(tex0, v_TexCoords);    
    //out_Color = vec4(v_TexCoords, 0.0f, 1.0f);
}

#version 400


layout(location=0) in vec3 vertices;
layout(location=1) in vec2 texCoords;
layout(location=2) in vec3 normals;


uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;

out vec2 v_TexCoords;
out vec3 v_Normals;

void main() {
    gl_Position = proj * view * model * vec4(vertices, 1.0);
    v_TexCoords = texCoords;
    v_Normals = normals;
}

#version 400

uniform sampler2D tex0;
uniform float texScale;
uniform float timeDelta;

in vec2 v_TexCoords;
in vec3 v_Normals;

out vec4 out_Color;

void main() {

    vec2 tc = vec2(v_TexCoords.x + timeDelta, v_TexCoords.y) * texScale;
    vec2 tc2 = vec2(v_TexCoords.x + timeDelta * 2.0, v_TexCoords.y) * texScale * 0.5;
    vec2 tc3 = vec2(v_TexCoords.x + timeDelta * 4.0, v_TexCoords.y) * texScale * 0.25;

    vec3 color1 = texture(tex0, tc).rgb;
    vec3 color2 = texture(tex0, tc2).rgb;
    vec3 color3 = texture(tex0, tc3).rgb;

    vec3 color = mix(color1, color2, 0.75);
    color = mix(color, color3, 0.75);

    //out_Color = texture(tex0, tc);
    out_Color = vec4(color, 1.0);
    //out_Color = vec4(v_TexCoords, 0.0, 1.0);
}

#version 400

// Attributes
layout(location=0) in vec3 vertices;
layout(location=1) in vec2 texCoords;

// Uniforms
uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;

// Varying
out vec2 v_TexCoords;

void main() {
    gl_Position = proj * view * model * vec4(vertices, 1.0);
    v_TexCoords = texCoords;
}

#version 400

// Uniforms
uniform sampler2D inputTex0;
uniform float size;

// Varying
in vec2 v_TexCoords;
out vec4 out_Color;

vec3 hblur(sampler2D samp, vec2 tc, float blurSize) {
    vec3 sum = vec3(0.0);
    float iBlurSize = 1.0 / blurSize;

    sum += texture(samp, vec2(tc.x - 4.0 * iBlurSize, tc.y)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x - 3.0 * iBlurSize, tc.y)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x - 2.0 * iBlurSize, tc.y)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x - 1.0 * iBlurSize, tc.y)).rgb * 0.125;
    
    sum += texture(samp, vec2(tc.x + 1.0 * iBlurSize, tc.y)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x + 2.0 * iBlurSize, tc.y)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x + 3.0 * iBlurSize, tc.y)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x + 4.0 * iBlurSize, tc.y)).rgb * 0.125;

    return sum;
}

vec3 vblur(sampler2D samp, vec2 tc, float blurSize) {
    vec3 sum = vec3(0.0);
    float iBlurSize = 1.0 / blurSize;

    sum += texture(samp, vec2(tc.x, tc.y - 4.0 * iBlurSize)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x, tc.y - 3.0 * iBlurSize)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x, tc.y - 2.0 * iBlurSize)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x, tc.y - 1.0 * iBlurSize)).rgb * 0.125;

    sum += texture(samp, vec2(tc.x, tc.y + 1.0 * iBlurSize)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x, tc.y + 2.0 * iBlurSize)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x, tc.y + 3.0 * iBlurSize)).rgb * 0.125;
    sum += texture(samp, vec2(tc.x, tc.y + 4.0 * iBlurSize)).rgb * 0.125;

    return sum;
}

void main() {
    
    vec3 hb = hblur(inputTex0, v_TexCoords, size);
    vec3 vb = vblur(inputTex0, v_TexCoords, size);
    vec3 i = texture(inputTex0, v_TexCoords).rgb;

    vec3 o = (hb + vb + i) / 3.0;
    

    //out_Color = vec4(1.0, 0.0, 0.0, 1.0);
    out_Color = vec4(o, 1.0);
}

#version 400

// Attributes
layout(location=0) in vec3 vertices;
layout(location=1) in vec2 texCoords;

// Uniforms
uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;

// Varying
out vec2 v_TexCoords;

void main() {
    gl_Position = proj * view * model * vec4(vertices, 1.0);
    v_TexCoords = texCoords;
}

#version 400

// Uniforms
uniform sampler2D font0;
uniform vec3 color;

// Varying
in vec2 v_TexCoords;
out vec4 out_Color;

void main() {

    vec4 c = texture(font0, v_TexCoords);

    if(c.a < 0.5f) {
        discard;
    }

    c.rgb = c.rgb * color;

    out_Color = c;
}

#version 400

// Attributes
layout(location=0) in vec3 vertices;

// Uniforms
uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;

// Varying

void main() {
    gl_Position = proj * view * model * vec4(vertices, 1.0);
}

#version 400

// Uniforms
uniform vec3 color;

// Varyings
out vec4 out_Color;

void main() {
    out_Color = vec4(color, 1.0);
}

count: 0
count: 1
count: 2
count: 3
count: 4
count: 5
count: 6
count: 7
count: 8
count: 9
count: 10
count: 11
count: 12
count: 13
count: 14
count: 15
count: 16
count: 17
count: 18
count: 19
count: 20
count: 21
count: 22
count: 23
count: 24
count: 25
count: 26
count: 27
count: 28
count: 29
count: 30
count: 31
count: 32
count: 33
count: 34
count: 35
count: 36
count: 37
count: 38
count: 39
count: 40
count: 41
count: 42
count: 43
count: 44
count: 45
count: 46
count: 47
count: 48
count: 49
count: 50
count: 51
count: 52
count: 53
count: 54
count: 55
count: 56
count: 57
count: 58
count: 59
count: 60
count: 61
count: 62
count: 63
count: 64
count: 65
count: 66
count: 67
count: 68
count: 69
count: 70
count: 71
count: 72
count: 73
count: 74
count: 75
count: 76
count: 77
count: 78
count: 79
count: 80
count: 81
count: 82
count: 83
count: 84
count: 85
count: 86
count: 87
count: 88
count: 89
count: 90
count: 91
count: 92
count: 93
count: 94
count: 95
count: 96
count: 97
count: 98
count: 99
count: 100
